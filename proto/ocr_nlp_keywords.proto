syntax = "proto3";
package bigoai;

option cc_generic_services = true;

// OCR
message OcrRequest {
    string post_id = 1;
    repeated bytes images = 2;
    bytes video = 3;
}

message OcrResult {
    string text = 1;
    float ratio = 2;
    string lang = 3;
    string version = 4;
    string hard_mark = 5;
}

message ImageOcrResponse { repeated OcrResult results = 1; }

message TextRequest {
    string uid = 1;       // 用户id
    string seqid = 2;     // 请求唯一标识码， 可以不为int类型
    int64 reportTime = 3; // 上报时间，ms时间戳
    string content = 4;   // 文本内容
    string country = 5;   // 国家码
    string appid = 7;     // 应用ID，接入时指定，参考其他事项1
    int32 businessid = 8; // 应用类别下的业务id，接入时指定，参考其他事项1
    ConfigPb config = 9;  // 敏感词搜索配置
    string ext = 10;      // extra info
    bool disable_sensitive = 11; // 不使用敏感词
    bool disable_nlp = 12; // 不使用nlp模型，默认 disable_nlp = true，即不使用 nlp
    // 文字模型，若需使用 nlp 文字模型，请提前让开发及算法同学评估
    int32 type = 13; // 数据来源类型，由产品确定，接入时指定，参考其他事项1
};

message TextResponse {
    SensitiveWordResponse sensitive = 1;
    NLPResponse nlp = 2;
};

message map_string_float {
    string key = 1;
    float value = 2;
}

message NLPClassifyResItem {
    uint32 status = 1;   // 标识是否成功进行nlp分析 int(NLPServiceStatus)
    string err_msg = 2;  // 如果有错误发生 填写错误信息
    uint32 label = 3;    // 0: 未命中NLP文字模型， 1： 命中NLP文字模型
    float bert_prob = 4; // 返回的违规label对应的概率
    repeated map_string_float probability = 5; // 返回各个标签对应的概率值
};

message NLPResponse {
    string seqid = 1; // 和 NLPServiceRequest 中的seqid一样
    string model_version = 2;
    string model_abflag = 3;
    string model_classify_id = 4;
    repeated NLPClassifyResItem items = 5; // 返回的具体内容
};

// 敏感词
message ConfigPb {
    bool search_by_keyword = 1; // 是否按词匹配
    bool search_by_regular = 2; // 正则
    int32 keyword_type = 3;     // 是否需要白名单 0否 1是
}

message SensitiveWordResponse {
    int32 status = 1; // 返回码 标识整个请求是否成功；1:成功；其他数字表示不成功
    string error = 2; // 如果有错误发生 填写错误信息
    string uid = 3;   // 和 NLPServiceRequest 中的seqid一样
    string seqid = 4;
    bool is_hit = 5; // 0: 未命中敏感词， 1： 命中敏感词
    repeated SensitiveWordHitRule rule_list = 6;
    string err_desc = 7;
};

message SensitiveWordHitRule {
    int32 word_type = 1;
    int32 level = 2;
    string rule = 3;
    string text = 4;
    int32 sensitive_type = 5;
    int64 id = 6;
    string countrys = 7;
    int32 start = 8;
    int32 end = 9;
    // [start, end) 命中文本的位置， 左闭右开区间，index 从0开始，以字节（非字符）为单位
    enum WORD_LEVEL {
        INIT = 0; // pb3 限制
        LOW = 4;
        MEDIUM = 5;
        HIGH = 6;
    }
};

// OCR 识别结果
message ImageOcrResult {
    enum STATUS {
        OCR_INITIALIZE = 0; // 初始值
        OCR_FAILED = 100;   // OCR调用失败, 不推人审
        OCR_NORMAL = 200;   // OCR调用成功，有文字，未命中敏感词，不推
        OCR_EMPTY = 201;    // OCR调用成功，没有文字， 不推
        OCR_DANGER = 300;   // OCR调用成功，命中敏感词, 需要推人审
        OCR_CRITICAL = 400; // OCR调用成功，命中高等级敏感词, 需要自动处理
        OCR_SYS_ERR = 600; // OCR调用成功，过敏感词或判断文字类型失败，需要推人审
    }
    STATUS ocr_status = 1; // string(status)
    OcrResult ocr_result = 2;
    NLPClassifyResItem nlp_result = 3;
    SensitiveWordResponse sensitive_result = 4;
}
